openapi: 3.0.0
info: 
  description: WASAPhoto REST APIs
  title: WASAPhoto APIs
  version: 1.0.0
servers:
  - url: http://localhost:3000  
components:
  parameters:
    userid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: userid
      in: path
      required: true
      description: User ID
    postid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: postid
      in: path
      required: true
      description: Post ID
    commentid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: commentid
      in: path
      required: true
      description: Comment ID
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    ForbiddenRequest:
      description: |-
        Clien executes not request to the contents without
        required permissions.    
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    UnauthorizedRequest:
      description: |-
        The request had been executed without login
  schemas:
    Username:
      title: username
      description: unique username chosen by user
      type: string
    offset:
      title: offset
      description: Offset will be used by user for taking data from db with certain offset
      type: integer
      minimum: 0
    Password:
      title: password
      description: Password will be used by user to execute authentication
      properties:
        minLength:
          description: minimum length of password
          type: number
          minimum: 8
          maximum: 16
        maxlength:
          description: maximum length of password
          type: number
          minimum: 8
          maximum: 16
      type: string
    Avatar:
      title: avatar
      type: string
      format: binary
      description: Logo which can be associated with profile
    Like:
      title: Like
      description: Like entity
      type: object
      properties:
        idLiked:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        type:
          description: Type of entity where u can add some like dislike
          type: string
          enum: ["comment","post"]
          example: "comment"
    Dislike:
      title: Dislike
      description: Dislike entity
      type: object
      properties:
        idDisliked:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        type:
          description: Type of entity where u can add some like dislike
          type: string
          enum: ["comment","post"]
          example: "comment"
    banUser:
      title: ban user
      description: ban user entity
      type: object
      properties:
        banningUser: 
          description: Id of user who bans
          type: integer
          example: 2
        bannedUser:
          description: Id of banned user
          type: integer
          example: 7
          
    Subscription:
      title: subscription
      description: subscription entity
      type: object
      properties:
        followedUserId:
          description: Id of user who had been followed by others
          type: integer
          example: 4
        followingUserId:
          description: Id of user who is following
          type: integer
          example: 5
    Post:
      title: Post
      description: "This object represent a single Post"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
        text:
          description: Text related to post
          type: string
          example: I had been create the first post
        image:
          description: image related to post
          type: string
          format: binary
        quantitylikes:
          description: likes quantity related to current post
          type: string
        quantityDislikes:
          description: dislikes quantity related to current post
          type: string
    Comment:
      title: Comment
      description: represents a single comment
      type: object
      properties:
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: 0
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: 0
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
    Profile:
      title: Profile
      description: User represented as an object
      type: object
      properties:
        avatar:
          description: User's profile image
          #this is a user's profile image
          type: string
          format: binary
        userid:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: Unique username identifier
          type: string
          example: username1
        password:
          description: password to enter inside application
          type: string
          example: somepassword
        quantitySubscribers:
          description: number of subscribers to the current account
          type: string
          example: 3k
          minimum: 0
    
          
paths:
  /feed:
    get:
      operationId: getMyStream
      tags:
      - Stream
      summary: get latest available photos in a stream
      description: |-
        Return current profile page with posts on that one
      parameters:
        - name: offset
          in: query
          required: true
          description: offset can be a parameter which is passed to determine start and last index of data
          schema: { $ref: "#/components/schemas/offset" }
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
  /profiles/me:
    get:
      operationId: getUserProfile
      tags:
        - User
      summary: show information about user
      description: |-
        Return information about current user from a database
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: uploadPhoto
      tags:
        - User
      summary: create a post to share with others
      description: |-
        Create a post with a photo using the properties in the request body.
        The server will add photo to server
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Posgt is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/{postid}:
    parameters:
      - $ref: "#/components/parameters/postid"
    delete:
      operationId: deletePhoto
      tags:
        - User
      summary: delete a picture/post from profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      responses:
        "204":
          description: Post had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      operationId: modifyPhoto
      tags:
        - User
      summary: modify a picture/post under the profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      responses:
        "204":
          description: Post had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Post" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profiles/{userid}:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      tags:
        - Posts
      operationId: listPostUser
      summary: list all posts related to userid
      description: |-
        Show all posts of current user inside of application
      responses:
        "200":
          description: Posts of another user had been retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/subscribe:
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId: followUser
      tags:
      - Profiles
      summary: follow user if not followed yet
      description: |-
        Add pair user(who will have subscriptions)-user(subscriber) into database,
        if there is no pair created in that way
      responses:
        "200":
          description: Subscription had been executed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      tags:
      - Profiles
      summary: unfollow user if he had been followed before
      description: |-
        Remove pair user(who will has subscriptions)-user(subscriber) from database,
        if there is a pair
      responses:
        "204":
          description: Subscription had been removed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{postid}/like/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/userid"
    post:
      operationId: likePhoto
      tags:
        - Posts
      summary: puts like on post
      description: |-
        Add like related to some post
      responses:
        "200":
          description: Like had been added to the post
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikePhoto
      tags:
        - Posts
      summary: removes like from the post
      description: |-
        Removes like related to post
      responses:
        "204":
          description: Like had been removed from photo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/dislike:
    parameters:
      - $ref: "#/components/parameters/postid"
    post:
      operationId: likePost
      tags:
      - Profiles
      summary: puts dislike on post
      description: |-
        Add like related to some post
      responses:
        "200":
          description: Dislike had been added to the photo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Dislike" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: dislikePost
      tags:
      - Profiles
      summary: removes like from the post
      description: |-
          Removes like related to post
      responses:
        "204":
          description: Dislike had been removed to the photo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/comments:
    parameters:
      - $ref: "#/components/parameters/postid"
    get:
      operationId: getListCommentsUnderPost
      tags:
      - Comments
      summary: returns list of comments related to some post
      description: "Returns all comments related to choosen post in database"
      #put inside all possible responses
      responses:
        "200":
          description: Comments had been retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /post/{postid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/commentid"
    post:
      operationId: commentPost
      tags:
      - Comments
      summary: create a comment under Photo
      description: |-
        Create a comment under photo
      responses:
        "200":
          description: Comments had been retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      operationId: updateComment
      tags:
      - Comments
      summary: update a comment created before
      description: |-
        Update a comment under photoPost
      responses:
        "200":
          description: Comment had been updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    delete:
      operationId: uncommentPhoto
      tags:
      - Comments
      summary: removes a comment under Photo
      description: |-
        Create a comment under photo
        
      responses:
        "204":
          description: Comment is removed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Like" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/banuser:
  
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId: banUser
      tags:
      - Account
      summary: ban User without giving possibility to see posts
      description: |-
        Add a pair (userBans, userBanned) inside of a database
        after that operation banned user can't see posts of userBans
      responses:
        "201":
          description: Entity for banning had been created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unbanUser
      tags:
        - Account
      summary: unban User and give possibility to see posts
      description: |-
        Removes a pair (userBans, userBanned) from a database
        after that operation banned user can see posts of userBans
      responses:
        "204":
          description: Entity for banning had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/banUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  # i am not sure if the method below should exist

  #/profiles/me/settings:
  #  get:
  #    operationId: listProfileSettings
  #    summary: Returns settings for profile
  #    description: |-
  #      Retrieve all settings from profile as list
  #    responses:
  #      "200":
  #        description: returns all settings related to current user
  #        content:
  #          application/json:
  #            schema: { $ref: "#/components/schemas/Comment" }
  #      "400": { $ref: "#/components/responses/BadRequest" }
  #      "403": { $ref: "#/components/responses/ForbiddenRequest" }
  #      "500": { $ref: "#/components/responses/InternalServerError" }
  
    
        
  /profiles/me/settings/changePassword:
    patch:
      operationId: changePassword
      tags:
      - Account
      summary: Modifies password of user
      description: |-
        Changes user's password
      responses:
        "200":
          description: user password had been changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Password" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/settings/changeAvatar:
    patch:
      operationId: changeAvatar
      tags:
      - Account
      summary: Changes avatar of user
      description: |-
        Changes user's avatar
      responses:
        "200":
          description: user's avatar had been changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Avatar" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/settings/deleteAccount:
    delete:
      operationId: deleteAccount
      tags:
      - Account
      summary: Delete Account of user
      description: |-
        Delete account from application
      responses:
        "204":
          description: user's profile had been deleted successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/settings/changeUsername:
    patch:
      tags:
      - Account
      operationId: setMyUsername
      summary: update current username related to current userprofile
      description: |-
        Update a username using a new one in a request body.
        The server will update a username with a new one
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      responses:
        "200":
          description: username had been modified successfully
          content: 
            application/json:
              schema: { $ref: "#/components/schemas/Username" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
