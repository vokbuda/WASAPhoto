openapi: 3.0.0
info: 
  description: WASAPhoto REST APIs
  title: WASAPhoto APIs
  version: 1.0.0
servers:
  - url: http://localhost:3000

components:
  parameters:
    userid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: userid
      in: path
      required: true
      description: User ID
    postid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: postid
      in: path
      required: true
      description: Post ID
    commentid:
      schema:
        type: integer
        example: 1
        readOnly: true
      name: commentid
      in: path
      required: true
      description: Comment ID
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    ForbiddenRequest:
      description: |-
        Clien executes not request to the contents without
        required permissions.    
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    UnauthorizedRequest:
      description: |-
        The request had been executed without login
  schemas:
  #below u see a data for another accounts
  # there must be a different one for accounts inside
    DataAccountUpdated:
      title: user's account
      description: represents user's account modifications
      type: object
      properties:
        entity:
          description: entity which is represented by user
          enum: ["username","password","avatar"]
          example: "username"
        operation:
          description: operation executed by user
          enum: ['had been changed','had been removed']
          example: 'changed'
      example:
        {
          entity: username,
          status: had been changed
        }
        
    DataAccountUpdate:
      title: account update
      description: represents request body for account update
      type: object
      properties:
        entity:
          description: data which can be update by user
          enum: ["username","password","avatar"]
          example: "username"
        newValue:
          description: new value for a component user wants change
          type: string
          #can be a binary string and then u can check data inside
          
          
      example:
        {
          entity: username,
          newValue: somenickname
        }
  
    
      
    offset:
      title: offset
      description: Offset will be used by user for taking data from db with certain offset
      type: integer
      minimum: 0
      example: 10
      
    #data below we can remove from our account in openapi
    #Password:
    #  title: password
    #  description: Password will be used by user to execute authentication
    #  type: string
    #  minLength: 8
    #  maxLength: 16
    #  pattern: '^.*?$'
    #  example: 3I87XnRTj1*G
      #adjust pattern above
      
    #Avatar:
    #  title: avatar
    #  type: string
    #  format: binary
    #  description: Logo which can be associated with profile
    LikeToPost:
      title: request like to post
      description: requests like to post
      type: object
      properties:
        idPostLiked:
          description: id post which user likes
          type: integer
          example: 2
        idUser:
          description: Id of user who puts like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["add","remove"]
          example: "add"
      example:
        {
          idPostLiked: 2,
          idUser: 1,
          operation: "add"
        }
    DislikeToPost:
      title: request dislike to post
      description: requests to put dislike on post
      type: object
      properties:
        idPostDisliked:
          description: id post which user dislikes
          type: integer
          example: 2
        idUser:
          description: Id of user who puts dislike
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["add","remove"]
          example: "add"
      example:
        {
          idPostDisliked: 2,
          idUser: 1,
          operation: "add"
        }
      
    
    PostLiked:
      title: Like post
      description: Like entity for post
      type: object
      properties:
        idLiked:
          description: Id of liked post
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["added","removed"]
          example: "added"
      example:
        {
          idLiked: 2,
          idUser: 1,
          operation: "added"
        }
    PostDisliked:
      title: Dislike post
      description: Dislike entity for post
      type: object
      properties:
        idDisliked:
          description: Id of disliked post
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put dislike
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["dislikepost added","dislikepost removed"]
          example: "dislikepost added" 
      example:
        {
          idLiked: 2,
          idUser: 1,
          operation: "dislikepost added"
        }
        
    LikeToComment:
      title: requests like to comment
      description: requests to put like on comment
      type: object
      properties:
        idPost:
          description: Id of post related to comment where user had been put his like
          type: integer
          example: 2
        idCommentLike:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["add","remove"]
          example: "add"
      example:
        {
          idPost: 3,
          idLikedComment: 2,
          idUser: 1,
          operation: "add"
        }
    DislikeToComment:
      title: Requests dislike comment
      description: requests to put dislike under the comment
      type: object
      properties:
        idPost:
          description: Id of post related to comment where user had been put his dislike
          type: integer
          example: 2
        idDisliked:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["add","remove"]
          example: "add" 
      example:
        {
          idPost: 3,
          idDisLikedComment: 2,
          idUser: 1,
          operation: "remove"
        }
    
    
    CommentLiked:
      title: Like comment
      description: Like entity for comment
      type: object
      properties:
        idPost:
          description: Id of post related to comment where user had been put his like
          type: integer
          example: 2
        idLikedComment:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["commentlike added","commentlike removed"]
          example: "commentlike added"
      example:
        {
          idPost: 3,
          idLikedComment: 2,
          idUser: 1,
          operation: "commentlike added"
        }
    CommentDisliked:
      title: Dislike comment
      description: Dislike entity for comment
      type: object
      properties:
        idPost:
          description: Id of post related to comment where user had been put his dislike
          type: integer
          example: 2
        idDisliked:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put like
          type: integer
          example: 4
        operation:
          description: Type of operation
          type: string
          enum: ["commentdislike added","commentdislike removed"]
          example: "commentdislike added" 
      example:
        {
          idPost: 3,
          idDisLikedComment: 2,
          idUser: 1,
          operation: "commentdislike removed"
        }
    banToUser:
      title: ban user
      description: ban user entity
      type: object
      properties:
        banningUser: 
          description: Id of user who bans
          type: integer
          example: 2
        bannedUser:
          description: Id of banned user
          type: integer
          example: 7
        operation:
          description: type of operation
          enum: ["add","delete"]
          type: string
          example: "add"
      example:
        {
          banningUser: 2,
          bannedUser: 1,
          operation: "delete"
        }
        
    userBanChanged:
      title: ban user response
      description: ban user entity returned in case of successful operation
      type: object
      properties:
        banningUser: 
          description: Id of user who bans
          type: integer
          example: 2
        bannedUser:
          description: Id of banned user
          type: integer
          example: 7
        operation:
          description: type of operation
          enum: ["banuser added","banuser deleted"]
          type: string
          example: "banuser added"
      example:
        {
          banningUser: 2,
          bannedUser: 1,
          operation: "banuser deleted"
        }
        
    #there must be a request bodies for all components
    UserToSubscribe:
      title: requests user to subscribe
      description: subscription entity
      type: object
      properties:
        followedUserId:
          description: Id of user who had been followed by others
          type: integer
          example: 4
        followingUserId:
          description: Id of user who is following
          type: integer
          example: 5
          
        operation:
          description: Status of entity
          enum: ["add","remove"]
          type: string
          example: "add"
      example:
        {
          followedUserId: 2,
          followingUserId: 1,
          status: "add"
        }
      
          
    SubscribedToUser:
      title: subscription
      description: subscription entity
      type: object
      properties:
        followedUserId:
          description: Id of user who had been followed by others
          type: integer
          example: 4
        followingUserId:
          description: Id of user who is following
          type: integer
          example: 5
          
        operation:
          description: Status of entity
          enum: ["subscription added","subscription removed"]
          type: string
          example: "subscription removed"
          
      example:
        {
          followedUserId: 2,
          followingUserId: 1,
          status: "subscription added"
        }
    PostChanged:
      title: Post
      description: "This object represent a single Post after some operation"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
        text:
          description: Text related to post
          type: string
          example: I had been create the first post
        image:
          description: image related to post
          type: string
          format: binary
        quantitylikes:
          description: likes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes:
          description: dislikes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        operation:
          description: type operation executed by a user
          type: string
          enum: ["created","removed","updated","ok"]
      example:
        {
          postid: 2,
          text: This is some post inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          operation: created
        }
    PostRead:
      title: Post
      description: "This object represent a single Post"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
        text:
          description: Text related to post
          type: string
          example: I had been create the first post
        image:
          description: image related to post
          type: string
          format: binary
        quantitylikes:
          description: likes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes:
          description: dislikes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
      example:
        {
          postid: 2,
          text: This is some post inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
        }
      
    CommentChanged:
      title: Comment
      description: represents a single comment
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
          pattern: '^.*?$'
          minLength: 0
          maxLength: 255
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: '10m'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        operation:
          description: type operation executed by a user
          type: string
          enum: ["created","deleted","updated"]
      example:
        {
          postid: 3,
          commentid: 2,
          text: This is some comment inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          operation: deleted
        }
    CommentToChange:
      title: Comment request body
      description: represents a single comment requestbody
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
          pattern: '^.*?$'
          minLength: 0
          maxLength: 255
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: '10m'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        operation:
          description: type operation executed by a user
          type: string
          enum: ["create","delete","update"]
      example:
        {
          postid: 3,
          commentid: 2,
          text: This is some comment inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          operation: delete
        }
    CommentRead:
      title: Comment
      description: represents a single comment
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
          pattern: '^.*?$'
          minLength: 0
          maxLength: 255
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: '10m'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        operation:
          description: type operation executed by a user
          type: string
          enum: ["created","deleted","updated"]
      example:
        {
          postid: 3,
          commentid: 2,
          text: This is some comment inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k'
        }
    Profile:
      title: Profile
      description: User represented as an object
      type: object
      properties:
        avatar:
          description: User's profile image
          type: string
          format: binary
        userid:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: Unique username identifier
          type: string
          example: username1
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        password:
          description: password to enter inside application
          type: string
          example: "*zafgz3lU341"
          pattern: '^.*?$'
          minLength: 8
          maxLength: 16
        quantitySubscribers:
          description: number of subscribers to the current account
          type: string
          example: "3k"
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantitySubscriptions:
          description: number of users current user subscribed to
          type: string
          example: "2k"
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
          
        status:
          description: status of representation
          type: string
          enum: ["created","deleted","ok"]
          example: created
          
      example:
        {
          avatar: "binary string",
          userid: 1,
          username: 'User1',
          quantitySubscribers: '2.3k',
          quantitySubscriptions: '34m',
          status: deleted
        }
      
          
#there are some paths inside which u can check below          
paths:
  /posts:
    get:
      operationId: getMyStream
      tags:
      - Stream
      summary: get latest available photos in a stream
      description: |-
        Return current profile page with posts on that one
      parameters:
        - name: offset
          in: query
          required: true
          description: offset can be a parameter which is passed to determine start and last index of data
          schema: { $ref: "#/components/schemas/offset" }
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                description: Posts in reverse order taken by offset equal 10
                items: { $ref: "#/components/schemas/PostRead" }
          
          #above u see some component w  
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles:
    get:
      operationId: searchForUser
      tags: 
        - Search
      summary: shows top users and permits to search for specific user
      description: |-
        Return information about current user from a database
      responses:
        "200":
          description: List of profiles in reverse order
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                items: { $ref: "#/components/schemas/Profile" }
      
  /profiles/me:
    get:
      operationId: getUserProfile
      tags:
        - User
      summary: show user and all posts related to current user
      description: |-
        Return information about current user from a database
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                items: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: uploadPhoto
      tags:
        - User
      summary: create a post to share with others
      description: |-
        Create a post with a photo using the properties in the request body.
        The server will add photo to server
      #requestBody:
      #  description: Request for photo Upload
      #  required: true
      #  content:
        #below u can have data for uploading image maybe not application/json
      #    application/json:
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: Post created successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/{postid}:
    parameters:
      - $ref: "#/components/parameters/postid"
    delete:
      operationId: deletePhoto
      tags:
        - User
      summary: delete a picture/post from profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      responses:
        "200":
          description: Post had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      operationId: modifyPhoto
      tags:
        - User
      summary: modify a picture/post under the profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      #requestBody:
      #  description: Optional description in *Markdown*
      #  required: true
      #  content:
      #    application/json:
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: Post had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profiles/{userid}:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      tags:
        - Posts
      operationId: listPostUser
      summary: list all posts related to userid
      description: |-
        Show all posts of current user inside of application
      
      responses:
        "200":
          description: Posts of another user had been retrieved
          content:
            application/json:
            #this is must be an array and we should return array data for certain profile
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/subscribe:
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId: followUser
      tags:
      - Profiles
      summary: follow user if not followed yet
      
      description: |-
        Add pair user(who will have subscriptions)-user(subscriber) into database,
        if there is no pair created in that way
        
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
            #u must implement some scheme below for getting better results
              $ref: '#/components/schemas/UserToSubscribe'
        
      #requestBody:
      #  description: Optional description in *Markdown*
      #  required: true
      #  content:
      #    application/json:
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: Subscription had been executed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SubscribedToUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      tags:
      - Profiles
      summary: unfollow user if he had been followed before
      description: |-
        Remove pair user(who will has subscriptions)-user(subscriber) from database,
        if there is a pair
      responses:
        "200":
          description: Subscription had been removed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/SubscribedToUser" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: User is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{postid}/like/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/userid"
    post:
      operationId: likePhoto
      tags:
        - Posts
      summary: puts like on post
      description: |-
        Add like to collections of likes related to post
      requestBody:
        description: request to add like on post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeToPost'
      responses:
        "200":
          description: Like had been added to the post
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostLiked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikePhoto
      tags:
        - Posts
      summary: removes like from the post
      description: |-
        Removes like related to post
      responses:
        "200":
          description: Like had been removed from photo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostLiked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/dislike:
    parameters:
      - $ref: "#/components/parameters/postid"
    post:
      operationId: dislikePostAdd
      tags:
      - Profiles
      summary: puts dislike on post
      description: |-
        adding a dislike to the collection of dislikes
      requestBody:
        required: true
        content:
          application/json:
          #there must be token inside of request, with userid
            schema:
              $ref: '#/components/schemas/DislikeToPost'
        
      #requestBody:
      #  description: Optional description in *Markdown*
      #  required: true
      #  content:
      #    application/json:
          #there must be token inside of request, with userid
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      responses:
        "200":
          description: Dislike had been added to collections of dislikes under the photo
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostDisliked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: dislikePostRemove
      tags:
      - Profiles
      summary: removes like from the post
      description: |-
          Removes like related to post
      
      responses:
        "204":
          description: The resource was deleted successfully.
        #"200":
        #  description: Dislike had been removed to the photo
        #  content:
        #    application/json:
        #      schema: { $ref: "#/components/schemas/PostDisliked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/comments:
    parameters:
      - $ref: "#/components/parameters/postid"
    get:
      operationId: getListCommentsUnderPost
      tags:
      - Comments
      summary: returns list of comments related to some post
      description: "Returns all comments related to choosen post in database"
      #put inside all possible responses
      responses:
        "200":
          description: Comments had been retrieved
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                description: Comments in reverse order taken by offset equal 10
                items: { $ref: "#/components/schemas/CommentRead" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { description: Post is not found }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /post/{postid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/commentid"
    post:
      operationId: commentPost
      tags:
      - Comments
      summary: create a comment under Photo
      description: |-
        Create a comment under photo
      requestBody:
        description: Needed to create some comment under the post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentToChange'
      responses:
        "200":
          description: Comment had been retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      operationId: updateComment
      tags:
      - Comments
      summary: update a comment created before
      description: |-
        Update a comment under photoPost
      requestBody:
        description: Needed to update comment under some post
        required: true
        content:
          application/json:
            schema:
            
              $ref: '#/components/schemas/CommentToChange'
              
      #here u should have a data inside related to the request
      responses:
        "200":
          description: Comment had been updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    delete:
      operationId: uncommentPhoto
      tags:
      - Comments
      summary: removes a comment under Photo
      description: |-
        Create a comment under photo
      
        
      responses:
        #"204":
        #  description: Comment was deleted successfully.
        "200":
          description: Comment is removed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/account/banuser/{userid}:
  
    parameters:
      - $ref: "#/components/parameters/userid"
    post:
      operationId: banUser
      tags:
      - Account
      summary: ban User without giving possibility to see posts
      description: |-
        Add a pair (userBans, userBanned) inside of a database
        after that operation banned user can't see posts of userBans
      #requestBody:
      #  description: Optional description in *Markdown*
      #  required: true
      #  content:
      #    application/json:
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/banToUser" }
      responses:
        "201":
          description: Entity for banning had been created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/userBanChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unbanUser
      tags:
        - Account
      summary: unban User and give possibility to see posts
      description: |-
        Removes a pair (userBans, userBanned) from a database
        after that operation banned user can see posts of userBans
      responses:
#        "204":
#          description: Ban entity was deleted successfully.
        "200":
          description: Entity for banning had been deleted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/userBanChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  # i am not sure if the method below should exist

  #/profiles/me/settings:
  #  get:
  #    operationId: listProfileSettings
  #    summary: Returns settings for profile
  #    description: |-
  #      Retrieve all settings from profile as list
  #    responses:
  #      "200":
  #        description: returns all settings related to current user
  #        content:
  #          application/json:
  #            schema: { $ref: "#/components/schemas/Comment" }
  #      "400": { $ref: "#/components/responses/BadRequest" }
  #      "403": { $ref: "#/components/responses/ForbiddenRequest" }
  #      "500": { $ref: "#/components/responses/InternalServerError" }
  
    
        
  /profiles/me/account/changePassword:
    patch:
      operationId: changePassword
      tags:
      - Account
      summary: Modifies password of user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DataAccountUpdate" }
         
      description: |-
        Changes user's password
      responses:
        "200":
          description: user password had been changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/account/changeAvatar:
    patch:
      operationId: changeAvatar
      tags:
      - Account
      summary: Changes avatar of user
      description: |-
        Changes user's avatar
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DataAccountUpdate" }
      responses:
        "200":
          description: user's avatar had been changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/account/deleteAccount:
    delete:
      operationId: deleteAccount
      tags:
      - Account
      summary: Delete Account of user
      description: |-
        Delete account from application
      responses:
        204:
          description:  user's profile was deleted successfully.
#        "200":
#          description: user's profile had been deleted successfully
#          content:
#            application/json:
#              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/me/account/changeUsername:
    patch:
      tags:
      - Account
      operationId: setMyUsername
      summary: update current username related to current userprofile
      description: |-
        Update a username using a new one in a request body.
        The server will update a username with a new one
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DataAccountUpdate" }
      responses:
        "200":
          description: username had been modified successfully
          content: 
            application/json:
              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
  
        
        
                
          
        
      
      

  