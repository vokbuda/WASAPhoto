openapi: 3.0.0
info: 
  description: WASAPhoto REST APIs
  title: WASAPhoto APIs
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: Search
    description: Searhing users inside of database
  - name: Stream
    description: feed of authenticated user
  - name: Posts
    description: everything related to the post entity
  - name: Comments
    description: everything related to comments
  - name: Account
    description: everything related to account's management
  - name: Login
    description: login user
security:
  - BasicAuth: []
  - BearerAuth: []

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    banninguserid:
      schema:
        description: unique id related to user who bans
        type: integer
        example: 1
        readOnly: true
      name: banninguserid
      in: path
      required: true
      description: User ID who bans
    banneduserid:
      schema:
        description: unique id related to user who banned
        type: integer
        example: 1
        readOnly: true
      name: banneduserid
      in: path
      required: true
      description: User ID who bans
    subscribinguserid:
      schema:
        description: unique id related to user who subscribes
        type: integer
        example: 1
        readOnly: true
      name: subscribinguserid
      in: path
      required: true
      description: User ID who subscribes
    subscribeduserid:
      schema:
        description: unique id related to user who got new subscriber
        type: integer
        example: 1
        readOnly: true
      name: subscribeduserid
      in: path
      required: true
      description: User ID who got new subscriber
    userid:
      schema:
        description: unique id related to user
        type: integer
        example: 1
        readOnly: true
      name: userid
      in: path
      required: true
      description: User ID
    postid:
      schema:
        description: unique id related to the post
        type: integer
        example: 1
        readOnly: true
      name: postid
      in: path
      required: true
      description: Post ID
    commentid:
      schema:
        description: unique id related to the comment
        type: integer
        example: 1
        readOnly: true
      name: commentid
      in: path
      required: true
      description: Comment ID
  responses:
    BadRequest:
      description: |-
        The request was not compliant with the documentation
        (eg. missing fields, etc).
    ForbiddenRequest:
      description: |-
        Clien executes not request to the contents without
        required permissions.    
    InternalServerError:
      description: |-
        The server encountered an internal error.
        Further info in server logs.
    UnauthorizedRequest:
      description: |-
        The request had been executed without login
    NotFound:
      description: |-
        Component is not found
      
  schemas:
    LoginRequest:
      description: this is a request body for login execution
      type: object
      properties:
        username:
          description: This is a username of person
          type: string
          example: check
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        
      example:
            {
              username: "username"
              
            }
    LoginResponse:
      type: object
      description: response in case if user logged in
      properties:
        session:
          description: identifier of user which is needed to identify user when logged in
          type: string
          example: "somedata inside"
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        uid:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
      example:
        {
          session: ebala,
          uid: 5
        }
    DataAccountUpdated:
      title: user's account
      description: represents user's account modifications
      type: object
      properties:
        entity:
          description: entity which is represented by user
          enum: ["username","password","avatar"]
          example: "username"
        
         
      example:
        {
          entity: username
          
        }
        
    DataAccountUpdate:
      title: account update
      description: represents request body for account update
      type: object
      properties:
        newValue:
          description: new value for a component user wants change
          type: string
          example: newusername
          minLength: 3
          maxLength: 1000000
          pattern: '^.*?$'
          #can be a binary string and then u can check data inside
      example:
        {
          newValue: somenickname
        }
  
    
      
    offset:
      title: offset
      description: Offset will be used by user for taking data from db with certain offset
      type: integer
      minimum: 0
      example: 10
    EmotionToPost:
      title: requests emotion on post
      description: requests to put emotion on post
      type: object
      properties:
        idPostLiked:
          description: id post which user likes
          type: integer
          example: 2
        idUser:
          description: Id of user who puts like
          type: integer
          example: 4
      example:
        {
          idPost: 2,
          idUser: 1,
        }
        
    EmotionToComment:
      title: requests emotion to comment
      description: requests to put emotion on comment
      type: object
      properties:
        idPost:
          description: Id of post related to comment where user had been put his emotion
          type: integer
          example: 2
        idCommentLike:
          description: Id of liked entity
          type: integer
          example: 2
        idUser:
          description: Id of user who had been put emotion
          type: integer
          example: 4
      example:
        {
          idPost: 3,
          idLikedComment: 2,
          idUser: 1
        } 
        
    banToUser:
      title: ban user
      description: ban user entity
      type: object
      properties:
        banningUser: 
          description: Id of user who bans
          type: integer
          example: 2
        bannedUser:
          description: Id of banned user
          type: integer
          example: 7
      example:
        {
          banningUser: 2,
          bannedUser: 1
        }
        
    #there must be a request bodies for all components
    UserToSubscribe:
      title: requests user to subscribe
      description: subscription entity
      type: object
      properties:
        followedUserId:
          description: Id of user who had been followed by others
          type: integer
          example: 4
        followingUserId:
          description: Id of user who is following
          type: integer
          example: 5
      example:
        {
          followedUserId: 2,
          followingUserId: 1
        }
      
    PostChanged:
      title: Post
      description: "This object represent a single Post after some operation"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
        quantitylikes:
          description: likes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes:
          description: dislikes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        
        
      example:
        {
          postid: 2,
          quantitylikes: '1k',
          quantityDislikes: '2.3k'
        }
        
    PostCreated:
      title: PostCreated
      description: "This object represents a single Post after operation create"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
      example:
          {
            postid: 2
          }
    CommentCreated:
      title: CommentCreated
      description: "This object represents a single Comment after operation create"
      type: object
      properties:
        commentid:
          description: Unique comment identifier.
          type: integer
          example: 1
          readOnly: true
      example:
          {
            commentid: 2
          }
      
    PostToChange:
      title: PostToChange
      description: "This object represent a single Post after some operation"
      type: object
      properties:
        postid:
          description: Unique post identifier.
          type: integer
          example: 1
          readOnly: true
        text:
          description: Text related to post
          type: string
          minLength: 0
          maxLength: 255
          pattern: '^.*?$'
          example: I had been create the first post
        image:
          description: image related to post
          type: string
          format: binary
          minLength: 0
          maxLength: 100000
      example:
        {
          postid: 2,
          text: This is some post inside,
          image: ""
        }
    PostRead:
      title: PostRead
      description: "This object represent a single Post"
      type: object
      properties:
        postid:
          description: Unique post identifier
          type: integer
          example: 1
          readOnly: true
        text:
          description: Text related to post
          type: string
          minLength: 0
          maxLength: 255
          example: I had been create the first post
        image:
          description: image related to post
          type: string
          format: binary
        quantitylikes:
          description: likes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes:
          description: dislikes quantity related to current post
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        lastChange:
          type: string
          format: date-time
          description: Creation post date and time
          example: "2022-11-20T08:30:00Z"
          minLength: 20
          maxLength: 20
          
      example:
        {
          postid: 2,
          text: This is some post inside,
          image: "",
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          createdAt: "2022-11-20T08:30:00Z"
        }
      
    CommentChanged:
      title: Comment
      description: represents a single comment
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: '10m'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
       
          
        
      example:
        {
          postid: 3,
          commentid: 2,
          quantityLikes: '1k',
          quantityDislikes: '2.3k',
          
        }
    CommentToChange:
      title: Comment request body
      description: represents a single comment requestbody
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
          pattern: '^.*?$'
          minLength: 0
          maxLength: 255
        
        
      example:
        {
          postid: 3,
          commentid: 2,
          text: This is some comment inside
          
        }
    CommentRead:
      title: CommentToRead
      description: represents a single comment used for reading
      type: object
      properties:
        postid:
          description: Unique identifier of post which comment is related to
          type: integer
          example: 2
        commentid:
          description: Unique comment identifier
          type: integer
          example: 1
        text:
          description: text related to the comment
          type: string
          example: I wrote some comment inside
          pattern: '^.*?$'
          minLength: 0
          maxLength: 255
        quantitylikes:
          description: likes quantity related to current comment
          type: string
          example: '1k'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantityDislikes: 
          description: dislikes quantity related to current comment
          type: string
          example: '10m'
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        lastChange:
          type: string
          format: date-time
          description: last change related to comment
          example: "2022-11-20T08:30:00Z"
          minLength: 20
          maxLength: 20
        
      example:
        {
          postid: 3,
          commentid: 2,
          text: This is some comment inside,
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          lastChange: "2022-11-20T08:30:00Z"
        }
    Profile:
      title: Profile
      description: User represented as an object
      type: object
      properties:
        avatar:
          description: User's profile image
          type: string
          format: binary
        userid:
          description: Unique user identifier
          type: integer
          example: 1
          readOnly: true
        username:
          description: Unique username identifier
          type: string
          example: username1
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        password:
          description: password to enter inside application
          type: string
          example: "*zafgz3lU341"
          pattern: '^.*?$'
          minLength: 8
          maxLength: 16
        quantitySubscribers:
          description: number of subscribers to the current account
          type: string
          example: "3k"
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
        quantitySubscriptions:
          description: number of users current user subscribed to
          type: string
          example: "2k"
          pattern: '(^[0-9]{1,3}\.[0-9]{1}k$)|(^[0-9]{1,3}\.[0-9]{1}m$)|(^[0-9]{1,3}$)|(^[0-9]{1,3}k$)|(^[0-9]{1,3}m$)'
          minLength: 1
          maxLength: 6
          
      example:
        {
          avatar: "binary string",
          userid: 1,
          username: 'User1',
          quantitySubscribers: '2.3k',
          quantitySubscriptions: '34m'
        }
      
          
#there are some paths inside which u can check below          
paths:
  /session:
    post:
      tags:
      - Login
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginRequest" }
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema: { $ref: "#/components/schemas/LoginResponse" }
                

  /posts:
    get:
      operationId: getMyStream
      tags:
      - Stream
      summary: get latest available photos in a stream
      security:
        - BearerAuth: []
      description: |-
        Return current profile page with posts on that one
      parameters:
        - name: offset
          in: query
          required: true
          description: offset can be a parameter which is passed to determine start and last index of data
          schema: { $ref: "#/components/schemas/offset" }
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                description: Posts in reverse order taken by offset equal 10
                items: { $ref: "#/components/schemas/PostRead" }
                
                
              example: 
                  [{
          postid: 2,
          text: This is some post inside,
          image: "",
          quantitylikes: '1k',
          quantityDislikes: '2.8k',
          createdAt: "2022-11-20T08:30:00Z"
        },
        {
          postid: 3,
          text: Google,
          image: "",
          quantitylikes: '1k',
          quantityDislikes: '2.3k',
          createdAt: "2022-11-20T09:32:00Z"
        }

                    ]
                
                
                
          
          #above u see some component w  
          
        
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles:
    get:
      operationId: searchForUser
      tags: 
        - Search
      summary: shows top users and permits to search for specific user
      description: |-
        Return information about current user from a database
      responses:
        "200":
          description: List of profiles in reverse order
          content:
            application/json:
              schema:
                description: returns list of profiles in reverse order
                type: array
                minItems: 0
                maxItems: 10
                items: { $ref: "#/components/schemas/Profile" }
                
              example: [
                  {
                      avatar: "binary string",
                      userid: 1,
                      username: 'User1',
                      quantitySubscribers: '2.9k',
                      quantitySubscriptions: '30m'
                  },
                  {
                      avatar: "binary string",
                      userid: 2,
                      username: 'another one',
                      quantitySubscribers: '2.3k',
                      quantitySubscriptions: '25m'
                  }
                  ]
              
              
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /profiles/{userid}/posts:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      operationId: getUserProfilePosts
      tags:
        - Posts
      summary: get home page of current user
      description: |-
        Return information about current user from a database
      responses:
        "200":
          description: List of posts in reverse order
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: uploadPhoto
      tags:
        - Posts
      summary: create a post to share with others
      description: |-
        Create a post with a photo using the properties in the request body.
        The server will add photo to server
      security:
        - BearerAuth: []
      requestBody:
        description: Request for photo Upload
        required: true
        content:
        #below u can have data for uploading image maybe not application/json
          application/json:
            schema:
              $ref: '#/components/schemas/PostToChange'
      responses:
        "201":
          description: Post had been created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostCreated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/posts/{postid}:
    parameters:
      - $ref: "#/components/parameters/userid"
      - $ref: "#/components/parameters/postid"
    delete:
      operationId: deletePhoto
      security:
        - BearerAuth: []
      tags:
        - Posts
      summary: delete a picture/post from profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      
      responses:
        "204":
          description: Post had been deleted
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    put:
      operationId: modifyPhoto
      tags:
        - Posts
      summary: modify a picture/post under the profile
      description: |-
        Removes a post with a photo using the properties in the request body.
        The server will remove a photo
      requestBody:
        description: Requests for updating post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostToChange'
      responses:
        "200":
          description: Post had been updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PostChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /profiles/{userid}:
    parameters:
      - $ref: "#/components/parameters/userid"
    get:
      tags:
        - Account
      operationId: getUserProfile
      summary: shows all information related to certain account
      description: |-
        Show all posts of current user inside of application
      
      responses:
        "200":
          description: Posts of another user had been retrieved
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{subscribeduserid}/subscribe/{subscribinguserid}:
    parameters:
      - $ref: "#/components/parameters/subscribeduserid"
      - $ref: "#/components/parameters/subscribinguserid"
      
    put:
      operationId: followUser
      tags:
      - Account
      security:
        - BearerAuth: []
      summary: follow user if not followed yet
      description: |-
        Add pair user(who will have subscriptions)-user(subscriber) into database,
        if there is no pair created in that way
        
        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToSubscribe'
      responses:
        "204":
          description: Subscription had been executed
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      tags:
      - Account
      security:
        - BearerAuth: []
      summary: unfollow user if he had been followed before
      description: |-
        Remove pair user(who will has subscriptions)-user(subscriber) from database,
        if there is a pair
      responses:
        "204":
          description: Subscription had been removed
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /posts/{postid}/like/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/userid"
    put:
      operationId: likePhoto
      security:
        - BearerAuth: []
      tags:
        - Posts
      summary: puts like on post
      description: |-
        Add like to collections of likes related to post
      requestBody:
        description: request to add like on post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionToPost'
      responses:
        "204":
          description: Emotion had been added to the post
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikePhoto
      tags:
        - Posts
      security:
        - BearerAuth: []
      summary: removes like from the post
      description: |-
        Removes like related to post
      responses:
        "204":
          description: Like had been removed from photo
#          content:
#            application/json:
#              schema: { $ref: "#/components/schemas/PostLiked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/dislike/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/userid"
    put:
      operationId: islikePostAdd
      tags:
      - Posts
      summary: puts dislike on post
      description: |-
        adding a dislike to the collection of dislikes
      requestBody:
        required: true
        content:
          application/json:
          #there must be token inside of request, with userid
            schema:
              $ref: '#/components/schemas/EmotionToPost'
        
      #requestBody:
      #  description: Optional description in *Markdown*
      #  required: true
      #  content:
      #    application/json:
          #there must be token inside of request, with userid
      #      schema:
      #        $ref: '#/components/schemas/Pet'
      responses:
        "204":
          description: Dislike had been added to collections of dislikes under the photo
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: dislikePostRemove
      tags:
      - Posts
      summary: removes like from the post
      description: |-
          Removes like related to post
      
      responses:
        "204":
          description: The resource was deleted successfully.
        #"200":
        #  description: Dislike had been removed to the photo
        #  content:
        #    application/json:
        #      schema: { $ref: "#/components/schemas/PostDisliked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/comments:
    parameters:
      - $ref: "#/components/parameters/postid"
    get:
      operationId: getListCommentsUnderPost
      tags:
      - Comments
      summary: returns list of comments related to some post
      description: "Returns all comments related to choosen post in database"
      #put inside all possible responses
      responses:
        "200":
          description: Comments had been retrieved
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                description: Comments in reverse order taken by offset equal 10
                items: { $ref: "#/components/schemas/CommentRead" }
              example: 
                [{
                      postid: 3,
                      commentid: 2,
                      text: This is some comment inside,
                      quantitylikes: '1k',
                      quantityDislikes: '2.3k',
                      lastChange: "2022-11-20T08:30:00Z"
                },
                {
                        postid: 3,
                        commentid: 2,
                        text: This is some comment inside,
                        quantitylikes: 1k,
                        quantityDislikes: 2.3k,
                        lastChange: '2022-11-20T08:30:00Z'
                },

        ]
              
              
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    post:
      operationId: commentPhoto
      tags:
      - Comments
      security:
        - BearerAuth: []
      summary: create a comment under Photo
      description: |-
        Create a comment under photo
      requestBody:
        description: Needed to create some comment under the post
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentToChange'
      responses:
        "201":
          description: Comment had been created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentCreated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/comments/{commentid}:
    parameters:
      - $ref: "#/components/parameters/postid" 
      - $ref: "#/components/parameters/commentid"
    put:
      operationId: updateComment
      tags:
      - Comments
      summary: update a comment created before
      description: |-
        Update a comment under photoPost
      requestBody:
        description: Needed to update comment under some post
        required: true
        content:
          application/json:
            schema:
            
              $ref: '#/components/schemas/CommentToChange'
              
      #here u should have a data inside related to the request
      responses:
        
        "200":
          description: Comment had been updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
    delete:
      operationId: uncommentPhoto
      security:
        - BearerAuth: []
      tags:
      - Comments
      summary: removes a comment under Photo
      description: |-
        Delete comment under photo
      
        
      responses:
        "204":
          description: Comment was deleted successfully
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
        
  /posts/{postid}/comments/{commentid}/like/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/commentid"
      - $ref: "#/components/parameters/userid"
    put:
      operationId: likeComment
      tags:
        - Comments
      summary: adding a like in collections of likes under related comment
      description: |-
        Add like to collections of likes related to comment
      requestBody:
        description: request to add like on comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionToComment'
      responses:
        "204":
          description: Like had been added to comment
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unlikeComment
      tags:
        - Comments
      summary: removes like from the post
      description: |-
        Removes like related to post
      responses:
        "204":
          description: Like had been deleted from collection of likes from relative photo
#          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /posts/{postid}/comments/{commentid}/dislike/{userid}:
    parameters:
      - $ref: "#/components/parameters/postid"
      - $ref: "#/components/parameters/commentid"
      - $ref: "#/components/parameters/userid"
    put:
      operationId: dislikeComment
      tags:
        - Comments
      summary: add dislike on comment
      description: |-
        Add dislike to collections of dislikes related to comment
      requestBody:
        description: request to add like on comment
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionToComment'
      responses:
        "204":
          description: Dislike had been added to collections of dislikes for relative comment
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: undislikeComment
      tags:
        - Comments
      summary: removes like from the post
      description: |-
        Removing dislike related to post
      responses:
        "204":
          description: Like had been removed from photo
#          content:
#            application/json:
#              schema: { $ref: "#/components/schemas/PostLiked" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{banninguserid}/banuser/{banneduserid}:
  
    parameters:
      - $ref: "#/components/parameters/banninguserid"
      - $ref: "#/components/parameters/banneduserid"
    put:
      operationId: banUser
      tags:
      - Account
      summary: ban User without giving possibility to see posts
      description: |-
        addition banned user to collection of banned users by a certain one
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/banToUser" }
      responses:
        "204":
           description: Ban entity had been added successfully
          
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unbanUser
      tags:
        - Account
      security:
        - BearerAuth: []
      summary: unban User and give possibility to see posts
      description: |-
        Removes a pair (userBans, userBanned) from a database
        after that operation banned user can see posts of userBans
      responses:
        "204":
          description: Ban entity was deleted successfully
#        "200":
#          description: Entity for banning had been deleted
#          content:
#            application/json:
#              schema: { $ref: "#/components/schemas/userBanChanged" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{banninguserid}/banuser:
    parameters:
      - $ref: "#/components/parameters/banninguserid"

    get:
      operationId: bannedUsers
      tags:
      - Account
      summary: shows list of banned users
      
         
      description: |-
        Shows list of banned users by current one
      responses:
        "200":
          description: list of banned users returned
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                maxItems: 10
                description: Profiles blocked some time ago
                items: { $ref: "#/components/schemas/Profile" }
              example: 
                [{
                    avatar: "binary string",
                    userid: 1,
                    username: 'User1',
                    quantitySubscribers: '2.9k',
                    quantitySubscriptions: '64m'
                  },
                  {
                      avatar: "binary string",
                      userid: 2,
                      username: 'User2',
                      quantitySubscribers: '7.3k',
                      quantitySubscriptions: '14m'
                    }






                  ]




              
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    
        
  # i am not sure if the method below should exist

  #/profiles/me/settings:
  #  get:
  #    operationId: listProfileSettings
  #    summary: Returns settings for profile
  #    description: |-
  #      Retrieve all settings from profile as list
  #    responses:
  #      "200":
  #        description: returns all settings related to current user
  #        content:
  #          application/json:
  #            schema: { $ref: "#/components/schemas/Comment" }
  #      "400": { $ref: "#/components/responses/BadRequest" }
  #      "403": { $ref: "#/components/responses/ForbiddenRequest" }
  #      "500": { $ref: "#/components/responses/InternalServerError" }
  
    
        
  
  /profiles/{userid}/changeAvatar:
    parameters:
      - $ref: "#/components/parameters/userid"
    patch:
      operationId: changeAvatar
      tags:
      - Account
      summary: Changes avatar of user
      description: |-
        Changes user's avatar
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DataAccountUpdate" }
      responses:
        "200":
          description: user's avatar had been changed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/deleteAccount:
    parameters:
      - $ref: "#/components/parameters/userid"

    delete:
      operationId: deleteAccount
      tags:
      - Account
      summary: Delete Account of user
      description: |-
        Delete account from application
      responses:
        204:
          description:  user's profile had been deleted successfully.
#        "200":
#          description: user's profile had been deleted successfully
#          content:
#            application/json:
#              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  /profiles/{userid}/changeUsername:
    parameters:
      - $ref: "#/components/parameters/userid"
    patch:
      tags:
      - Account
      operationId: setMyUserName
      summary: update current username related to current userprofile
      description: |-
        Update a username using a new one in a request body.
        The server will update a username with a new one
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DataAccountUpdate" }
      responses:
        "200":
          description: username had been modified successfully
          content: 
            application/json:
              schema: { $ref: "#/components/schemas/DataAccountUpdated" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedRequest" }
        "403": { $ref: "#/components/responses/ForbiddenRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }